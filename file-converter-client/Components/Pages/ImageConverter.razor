@rendermode InteractiveServer
@page "/image-converter"

<PageTitle>Image Converter</PageTitle>

<h1>Image Converter</h1>
<div class="w-50">

    <div class="d-flex flex-column flex-md-row justify-content-between">
        <div class="align-self-center p-3">
            <InputFile id="@($"selectedFile")" style="display: none;" multiple OnChange="(e)=> AddFileToList(e)" />
            <input type="button" class="btn btn-danger" value="Browse..." onclick="@($"document.getElementById('selectedFile').click();")" />
        </div>
        <div class="align-self-center p-3">
            @if (SelectedImages.Any((f) => f.SelectedFormat != null && f.PathToFile != null))
            {
                <a class="btn btn-primary" @onclick="Submit">Convert</a>
            }
        </div>
    </div>

    @foreach (var file in SelectedImages)
    {
        <div class="card file mb-1">
            <div class="card-content">
                <div class="d-flex flex-column flex-md-row justify-content-between">
                    <div class="align-self-center p-3 w-25">
                        <i class="bi bi-file-earmark-fill"></i>
                        <span>@file.FileName</span>
                    </div>
                    <div class="align-self-center text-nowrap p-3 w-25">
                        <div class="align-middle">Convert to
                            <div class="dropdown b-dropdown format-dropdown btn-group">
                                <button class="btn dropdown-toggle btn-outline-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" disabled="@(file.IsWaitingForResponse)">
                                    @(file.SelectedFormat != null ? file.SelectedFormat.ToString() : "...")
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="max-height: 280px; overflow-y: auto;">
                                    @foreach (var format in Enum.GetValues<ImageFormats>())
                                    {
                                        <a class="dropdown-item" @onclick="()=>SelectFormat(format, file)">@format.ToString()</a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="text-end align-self-center p-3 w-25">
                        @if (file.IsWaitingForResponse)
                        {
                            <div class="spinner-border text-warning" role="status"></div>
                        }
                        else if (file.ErrorMessage != null)
                        {
                            <span class="text-danger">@file.ErrorMessage</span>
                        }
                        else if (file.ConvertedFileId != null)
                        {
                            <a id="download" class="btn btn-success" href="@($"http://localhost:5081/api/FileCollection/{file.ConvertedFileId}")" role="button" target="=_top">Download</a>
                        }
                    </div>
                    <div class="align-self-center text-nowrap p-3">
                        <a title="Delete" @onclick="()=>Delete(file)">
                            <i class="text-black bi bi-x h2"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code{
    private List<ImageToConvert> SelectedImages { get; set; } = new List<ImageToConvert>();
    private const int MAX_ALLOWED_SIZE = 100000000;
    private const int MAX_ALLOWED_FILE = 100;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    private async void SelectFormat(ImageFormats format, ImageToConvert file) //duplicate code, needs clean upp
    {
        file.SelectedFormat = format;
        var temp = file.ConvertedFileId;
        file.ConvertedFileId = null;
        file.ErrorMessage = null;

        if (temp != null)
        {
            try
            {
                var client = new RestClient("http://host.docker.internal:5081/");

                var request = new RestRequest($"api/FileCollection/{temp}");

                var response = (await client.ExecuteDeleteAsync(request));
                Console.WriteLine("response :" + response.Content);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
    }

    private async void AddFileToList(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(MAX_ALLOWED_FILE))
        {
            if (!SelectedImages.Any(f => f.FileName == file.Name))
            {
                using (var fileStream = file.OpenReadStream(MAX_ALLOWED_SIZE))
                {
                    var randomFile = Path.GetTempFileName();
                    var extension = Path.GetExtension(file.Name);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);

                    var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                    await fileStream.CopyToAsync(destinationStream);
                    destinationStream.Close();
                    SelectedImages.Add(new ImageToConvert(targetFilePath, file.Name));
                }
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    private void Submit()
    {
        List<Task> submitFilesForConversion = new List<Task>();
        foreach(var file in SelectedImages.Where((f)=> f.SelectedFormat != null && f.ConvertedFileId == null))
        {
            submitFilesForConversion.Add(Task.Factory.StartNew(async () =>
            {
                file.IsWaitingForResponse = true;
                await InvokeAsync(StateHasChanged);
                try
                {
                    var client = new RestClient("http://host.docker.internal:5081/");

                    var request = new RestRequest("api/FileCollection");

                    request.AddHeader("Content-Type", "multipart/form-data");

                    request.AddFile("file", file.PathToFile);

                    request.AddParameter("convertTo", file.SelectedFormat.ToString());

                    request.AddParameter("fileName", file.FileName);

                    var response = client.ExecutePost(request);

                    if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                        throw new Exception("Conversion not possible");

                    file.ConvertedFileId = String.Concat(response.Content.Where((c) => c != '\"'));
                    file.ErrorMessage = null;
                    Console.WriteLine("response :" + response.Content);
                }
                catch (Exception exception)
                {
                    Console.WriteLine(exception.Message);
                    file.ErrorMessage = exception.Message;
                }
                file.IsWaitingForResponse = false;
                await InvokeAsync(StateHasChanged);
            })
            );
        }
        Task.WaitAll(submitFilesForConversion.ToArray());
    }
    private async Task Delete(ImageToConvert file)
    {
        if (file.ConvertedFileId != null)
        {
            try
            {
                var client = new RestClient("http://host.docker.internal:5081/");

                var request = new RestRequest($"api/FileCollection/{file.ConvertedFileId}");

                var response = (await client.ExecuteDeleteAsync(request));
                Console.WriteLine("response :" + response.Content);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
        SelectedImages.Remove(file);
    }
    private class ImageToConvert
    {
        public string PathToFile { get; set; }
        public string FileName { get; set; }
        public ImageFormats? SelectedFormat { get; set; } = null!;
        public string? ConvertedFileId { get; set; } = null!;
        public string? ErrorMessage { get; set; } = null!;
        public bool IsWaitingForResponse { get; set; }

        public ImageToConvert(string pathToFile, string fileName)
        {
            PathToFile = pathToFile;
            IsWaitingForResponse = false;
            FileName = fileName;
        }
    }
}