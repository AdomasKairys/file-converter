@rendermode InteractiveServer
@page "/image-converter"

<PageTitle>Image Converter</PageTitle>

<h1>Image Converter</h1>



@if (FileToSubmit != null)
{
    <div class="card file mb-1">
        <div class="card-content">
            <div class="d-flex flex-column flex-md-row justify-content-between">
                <div class="align-self-center p-3 w-25">
                    <i class="bi bi-file-earmark-fill"></i>
                    <span>@FileToSubmit.Name</span>
                </div>
                <div class="align-self-center text-nowrap">
                    <div class="align-middle">Convert to
                        <div class="dropdown b-dropdown format-dropdown btn-group">
                            <button class="btn dropdown-toggle btn-outline-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @(SelectedFormat != null ? SelectedFormat.ToString() : "...")
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="max-height: 280px;overflow-y: auto;">
                                @foreach (var format in Enum.GetValues<ImageFormats>())
                                {
                                    <a class="dropdown-item" @onclick="()=>SelectFormat(format)">@format.ToString()</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-end p-3 w-25">
                    @if (ConvertedFileId != null)
                    {
                        <a id="download" class="btn btn-success" href="@($"http://localhost:5081/api/FileCollection/{ConvertedFileId}")" role="button" target="=_top">Download</a>
                    }
                </div>
                <div class="align-self-center text-nowrap p-3">
                    <a title="Delete" @onclick="()=>FileToSubmit = null">
                        <i class="text-black bi bi-x h2"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
}

<div class="d-flex flex-column flex-md-row justify-content-between">
    <div class="align-self-center p-3" >
        <InputFile id="selectedFile" style="display: none;" OnChange="(e)=>FileToSubmit = e.File" />
        <input type="button" class="btn btn-danger" value="Browse..." onclick="document.getElementById('selectedFile').click();" />
    </div>
    <div class="align-self-center p-3">
        @if (SelectedFormat != null && FileToSubmit != null)
        {
            <a class="btn btn-primary" @onclick="Submit">Convert</a>
        }
    </div>
</div>

@code{
    private string? ConvertedFileId { get; set; } = null!;
    private ImageFormats? SelectedFormat { get; set; } = null!;
    private IBrowserFile? FileToSubmit { get; set; } = null!;
    private const int MAX_ALLOWED_SIZE = 100000000;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    private void SelectFormat(ImageFormats format)
    {
        SelectedFormat = format;
    }
    private async Task Submit()
    {
        if (FileToSubmit != null)
        {
            try
            {
                var fileStream = FileToSubmit.OpenReadStream(MAX_ALLOWED_SIZE);

                var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(FileToSubmit.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                var client = new RestClient("http://host.docker.internal:5081/");

                var request = new RestRequest("api/FileCollection");

                request.AddHeader("Content-Type", "multipart/form-data");

                request.AddFile("file", targetFilePath);

                request.AddParameter("convertTo", SelectedFormat.ToString());

                request.AddParameter("fileName", FileToSubmit.Name);

                var response = (await client.ExecutePostAsync(request));
                ConvertedFileId = String.Concat(response.Content.Where((c) => c != '\"'));
                Console.WriteLine("response :" + response.Content);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
    }
}