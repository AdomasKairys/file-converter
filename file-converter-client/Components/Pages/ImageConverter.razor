@rendermode InteractiveServer
@page "/image-converter"

<PageTitle>Image Converter</PageTitle>

<h1>Image Converter</h1>
<div class="w-50">

@foreach (var file in SubmittedFiles)
{
    <div class="card file mb-1">
        <div class="card-content">
            <div class="d-flex flex-column flex-md-row justify-content-between">
                <div class="align-self-center p-3 w-25">
                    <i class="bi bi-file-earmark-fill"></i>
                    <span>@file.File.Name</span>
                </div>
                <div class="align-self-center text-nowrap p-3 w-25">
                    <div class="align-middle">Convert to
                        <div class="dropdown b-dropdown format-dropdown btn-group">
                            <button class="btn dropdown-toggle btn-outline-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" disabled="@(file.IsWaitingForResponse)">
                                @(file.SelectedFormat != null ? file.SelectedFormat.ToString() : "...")
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="max-height: 280px; overflow-y: auto;">
                                @foreach (var format in Enum.GetValues<ImageFormats>())
                                {
                                    <a class="dropdown-item" @onclick="()=>SelectFormat(format, file)">@format.ToString()</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-end align-self-center p-3 w-25">
                    @if (file.IsWaitingForResponse)
                    {
                        <div class="spinner-border text-warning" role="status"></div>
                    }
                    else if (file.ErrorMessage != null)
                    {
                        <span class="text-danger">@file.ErrorMessage</span>
                    }
                    else if (file.ConvertedFileId != null)
                    {
                        <a id="download" class="btn btn-success" href="@($"http://localhost:5081/api/FileCollection/{file.ConvertedFileId}")" role="button" target="=_top">Download</a>
                    }
                </div>
                <div class="align-self-center text-nowrap p-3">
                    <a title="Delete" @onclick="()=>Delete(file)">
                        <i class="text-black bi bi-x h2"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
}

<div class="d-flex flex-column flex-md-row justify-content-between">
    <div class="align-self-center p-3" >
        @foreach(var file in InputFields)
        {
            <InputFile @key="file" id="@($"selectedFile{file}")" style="display: none;" OnChange="(e)=>AddFileToList(e,file)" />
            <input type="button" class="btn btn-danger" style="@GetInputFileStyle(file)" value="Browse..." onclick="@($"document.getElementById('selectedFile{file}').click();")" />
        }
    </div>
    <div class="align-self-center p-3">
        @if (SubmittedFiles.Any((f) => f.SelectedFormat != null && f.File != null))
        {
            <a class="btn btn-primary" @onclick="Submit">Convert</a>
        }
    </div>
</div>
</div>

@code{
    private List<FileToSubmit> SubmittedFiles { get; set; } = new List<FileToSubmit>();
    private List<int> InputFields = [0];
    private const int MAX_ALLOWED_SIZE = 100000000;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    private async void SelectFormat(ImageFormats format, FileToSubmit file) //duplicate code, needs clean upp
    {
        file.SelectedFormat = format;
        var temp = file.ConvertedFileId;
        file.ConvertedFileId = null;
        file.ErrorMessage = null;

        if (temp != null)
        {
            try
            {
                var client = new RestClient("http://host.docker.internal:5081/");

                var request = new RestRequest($"api/FileCollection/{temp}");

                var response = (await client.ExecuteDeleteAsync(request));
                Console.WriteLine("response :" + response.Content);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
    }
    private string GetInputFileStyle(int index)
    {
        return SubmittedFiles.Any((f) => f.InputFieldId == index) ? "display: none" : "";
    }
    private void AddFileToList(InputFileChangeEventArgs e, int id)
    {
        SubmittedFiles.Add(new FileToSubmit(e.File, id));
        InputFields.Add(id+1);
    }
    private async Task Submit()
    {
        foreach(var file in SubmittedFiles.Where((f)=> f.SelectedFormat != null && f.ConvertedFileId == null))
        {
            file.IsWaitingForResponse = true;
            try
            {

                var fileStream = file.File.OpenReadStream(MAX_ALLOWED_SIZE);

                var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(file.File.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                var client = new RestClient("http://host.docker.internal:5081/");

                var request = new RestRequest("api/FileCollection");

                request.AddHeader("Content-Type", "multipart/form-data");

                request.AddFile("file", targetFilePath);

                request.AddParameter("convertTo", file.SelectedFormat.ToString());

                request.AddParameter("fileName", file.File.Name);

                var response = (await client.ExecutePostAsync(request));

                if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                    throw new Exception("Conversion not possible");

                file.ConvertedFileId = String.Concat(response.Content.Where((c) => c != '\"'));
                file.ErrorMessage = null;
                Console.WriteLine("response :" + response.Content);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
                file.ErrorMessage = exception.Message;
            }
            file.IsWaitingForResponse = false;
        }
    }
    private async Task Delete(FileToSubmit file)
    {
        if (file.ConvertedFileId != null)
        {
            try
            {
                var client = new RestClient("http://host.docker.internal:5081/");

                var request = new RestRequest($"api/FileCollection/{file.ConvertedFileId}");

                var response = (await client.ExecuteDeleteAsync(request));
                Console.WriteLine("response :" + response.Content);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
        SubmittedFiles.Remove(file);
        InputFields.Remove(file.InputFieldId);
    }
    private class FileToSubmit
    {
        public IBrowserFile File { get; set; }
        public ImageFormats? SelectedFormat { get; set; } = null!;
        public string? ConvertedFileId { get; set; } = null!;
        public int InputFieldId { get; set; }
        public string? ErrorMessage { get; set; } = null!;
        public bool IsWaitingForResponse { get; set; }

        public FileToSubmit(IBrowserFile file, int id)
        {
            File = file;
            InputFieldId = id;
            IsWaitingForResponse = false;
        }
    }
}